<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <!-- Root Context: defines shared resources visible to all other web components -->

    <context:spring-configured/>

    <!-- It register the beans in context and scan the annotations inside beans and activate them -->
    <context:component-scan base-package="com.atheesh.app.ws" />

    <!--reading the property file-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="false"/>
        <!--<property name="ignoreResourceNotFound" value="true"/>-->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="locations">
            <list>
                <value>classpath:application.properties</value>
                <!--<value>file:${catalina.base}/conf/Catalina/localhost/application.properties</value>-->
            </list>
        </property>
    </bean>
    <!--reading the property file-->

    <!-- Simple implementation of the standard JDBC DataSource interface,
        configuring the plain old JDBC DriverManager via bean properties -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
    </bean>

    <!-- This produces a container-managed EntityManagerFactory;
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.atheesh.app.ws"/>
        <property name="persistenceProviderClass" value="org.hibernate.jpa.HibernatePersistenceProvider"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${db.hibernate.dialect}</prop>
                <prop key="hibernate.jdbc.time_zone">${db.hibernate.jdbc.time_zone}</prop>
                <prop key="db.hibernate.show_sql">${db.hibernate.show_sql}</prop>
                <prop key="db.hibernate.hbm2ddl.auto">${db.hibernate.hbm2ddl.auto}</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <!--<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">-->
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <!--<property name="sessionFactory" ref="entityManagerFactory"/>-->
    </bean>

    <!-- This allow for dispatching requests to Controllers -->
    <tx:annotation-driven/>
    <jpa:repositories base-package="com.atheesh.app.ws" />

    <!--for activate only annotations ex:autowired-->
    <!--<context:annotation-config />-->

    <!--<import resource="classpath:db-context.xml"/>-->

    <!-- SET default mail properties -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${spring.mail.host}"/>
        <property name="port" value="${spring.mail.port}"/>
        <property name="username" value="${spring.mail.username}"/>
        <property name="password" value="${spring.mail.password}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">${spring.mail.properties.mail.smtp.auth}</prop>
                <prop key="mail.smtp.starttls.enable">${spring.mail.properties.mail.smtp.starttls.enable}</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>

    <!-- We can have some pre-configured messagess also which are ready to send -->

    <bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="to" value="rathnaweeraatheesh72@gmail.com"/>
        <property name="from" value="${spring.mail.username}"/>
        <property name="subject" value="FATAL - Application crash. Save your job !!"/>
    </bean>
</beans>